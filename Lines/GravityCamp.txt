using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using static UnityEditor.Progress;

public class ColectItems : MonoBehaviour
{


    public float GravityArea;
    Collider[] Colliders;
    List<GameObject> Rigidbodies = new();

    private delegate void DelMetodo(); // delegate para encapsular o metodo

    DelMetodo Del = new(() =>
    {
        //codigo
    });





    private void Awake()
    {
        //procurar no data base os items ja coletados e adicona na lista
    }

    private void Start()
    {


         
    }

private void Update()
    {
        int layerToIgnore = LayerMask.NameToLayer("Ignore Raycast");
        int layerMask = Physics.DefaultRaycastLayers & ~(1 << layerToIgnore);

        Colliders = Physics.OverlapSphere(transform.position, GravityArea, layerMask);

        if(Colliders.Length != 0)
        {
            foreach (var item in Colliders)
            {
                    Rigidbodies.Add(item.gameObject); 
            };
        }
       

    }

    private void FixedUpdate()
    {
        foreach (var gmObj in Rigidbodies)
        {
            Rigidbody rb = gmObj.gameObject.GetComponent<Rigidbody>();
            if(rb != null)
            {
                float distance = Vector3.Distance(transform.position, gmObj.transform.position);
                if(distance <= GravityArea) {
                    rb.useGravity = false;
                    rb.AddForce(Vector3.up * 0.02f, ForceMode.Acceleration);
                }
                else
                {
                    rb.AddForce(Vector3.zero,ForceMode.Acceleration);
                    rb.useGravity = true;
                }
                //REMOVE O ITEM DA LISTA QUANDO ELE SAIR DA ZONA
            }

        }

    }

    private void OnDrawGizmos()
    {
        Gizmos.color = Color.yellow;
        Gizmos.DrawWireSphere(transform.position, GravityArea);
    }


}
